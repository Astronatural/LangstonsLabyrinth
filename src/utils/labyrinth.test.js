/* tests for labrynth code */
import { calculateNewPosition } from './labyrinth.js';

test('Tests labrynth `up` on 3x3', () => {
   expect(calculateNewPosition(0, 'up', 9)).toBe(6);
   expect(calculateNewPosition(1, 'up', 9)).toBe(7);
   expect(calculateNewPosition(2, 'up', 9)).toBe(8);
   expect(calculateNewPosition(3, 'up', 9)).toBe(0);
   expect(calculateNewPosition(4, 'up', 9)).toBe(1);
   expect(calculateNewPosition(5, 'up', 9)).toBe(2);
   expect(calculateNewPosition(6, 'up', 9)).toBe(3);
   expect(calculateNewPosition(7, 'up', 9)).toBe(4);
   expect(calculateNewPosition(8, 'up', 9)).toBe(5);
});

test('Tests labrynth `down` on 3x3', () => {
   expect(calculateNewPosition(0, 'down', 9)).toBe(3);
   expect(calculateNewPosition(1, 'down', 9)).toBe(4);
   expect(calculateNewPosition(2, 'down', 9)).toBe(5);
   expect(calculateNewPosition(3, 'down', 9)).toBe(6);
   expect(calculateNewPosition(4, 'down', 9)).toBe(7);
   expect(calculateNewPosition(5, 'down', 9)).toBe(8);
   expect(calculateNewPosition(6, 'down', 9)).toBe(0);
   expect(calculateNewPosition(7, 'down', 9)).toBe(1);
   expect(calculateNewPosition(8, 'down', 9)).toBe(2);
});

test('Tests labrynth `left` on 3x3', () => {
   expect(calculateNewPosition(0, 'left', 9)).toBe(2);
   expect(calculateNewPosition(1, 'left', 9)).toBe(0);
   expect(calculateNewPosition(2, 'left', 9)).toBe(1);
   expect(calculateNewPosition(3, 'left', 9)).toBe(5);
   expect(calculateNewPosition(4, 'left', 9)).toBe(3);
   expect(calculateNewPosition(5, 'left', 9)).toBe(4);
   expect(calculateNewPosition(6, 'left', 9)).toBe(8);
   expect(calculateNewPosition(7, 'left', 9)).toBe(6);
   expect(calculateNewPosition(8, 'left', 9)).toBe(7);
});

test('Tests labrynth `right` on 3x3', () => {
   expect(calculateNewPosition(0, 'right', 9)).toBe(1);
   expect(calculateNewPosition(1, 'right', 9)).toBe(2);
   expect(calculateNewPosition(2, 'right', 9)).toBe(0);
   expect(calculateNewPosition(3, 'right', 9)).toBe(4);
   expect(calculateNewPosition(4, 'right', 9)).toBe(5);
   expect(calculateNewPosition(5, 'right', 9)).toBe(3);
   expect(calculateNewPosition(6, 'right', 9)).toBe(7);
   expect(calculateNewPosition(7, 'right', 9)).toBe(8);
   expect(calculateNewPosition(8, 'right', 9)).toBe(6);
});

test('Tests labrynth `up` on 4x4', () => {
   expect(calculateNewPosition(0, 'up', 16)).toBe(12);
   expect(calculateNewPosition(1, 'up', 16)).toBe(13);
   expect(calculateNewPosition(2, 'up', 16)).toBe(14);
   expect(calculateNewPosition(3, 'up', 16)).toBe(15);
   expect(calculateNewPosition(4, 'up', 16)).toBe(0);
   expect(calculateNewPosition(5, 'up', 16)).toBe(1);
   expect(calculateNewPosition(6, 'up', 16)).toBe(2);
   expect(calculateNewPosition(7, 'up', 16)).toBe(3);
   expect(calculateNewPosition(8, 'up', 16)).toBe(4);
   expect(calculateNewPosition(9, 'up', 16)).toBe(5);
   expect(calculateNewPosition(10, 'up', 16)).toBe(6);
   expect(calculateNewPosition(11, 'up', 16)).toBe(7);
   expect(calculateNewPosition(12, 'up', 16)).toBe(8);
   expect(calculateNewPosition(13, 'up', 16)).toBe(9);
   expect(calculateNewPosition(14, 'up', 16)).toBe(10);
   expect(calculateNewPosition(15, 'up', 16)).toBe(11);
});

test('Tests labrynth `down` on 4x4', () => {
   expect(calculateNewPosition(0, 'down', 16)).toBe(4);
   expect(calculateNewPosition(1, 'down', 16)).toBe(5);
   expect(calculateNewPosition(2, 'down', 16)).toBe(6);
   expect(calculateNewPosition(3, 'down', 16)).toBe(7);
   expect(calculateNewPosition(4, 'down', 16)).toBe(8);
   expect(calculateNewPosition(5, 'down', 16)).toBe(9);
   expect(calculateNewPosition(6, 'down', 16)).toBe(10);
   expect(calculateNewPosition(7, 'down', 16)).toBe(11);
   expect(calculateNewPosition(8, 'down', 16)).toBe(12);
   expect(calculateNewPosition(9, 'down', 16)).toBe(13);
   expect(calculateNewPosition(10, 'down', 16)).toBe(14);
   expect(calculateNewPosition(11, 'down', 16)).toBe(15);
   expect(calculateNewPosition(12, 'down', 16)).toBe(0);
   expect(calculateNewPosition(13, 'down', 16)).toBe(1);
   expect(calculateNewPosition(14, 'down', 16)).toBe(2);
   expect(calculateNewPosition(15, 'down', 16)).toBe(3);
});

test('Tests labrynth `right` on 4x4', () => {
   expect(calculateNewPosition(0, 'right', 16)).toBe(1);
   expect(calculateNewPosition(1, 'right', 16)).toBe(2);
   expect(calculateNewPosition(2, 'right', 16)).toBe(3);
   expect(calculateNewPosition(3, 'right', 16)).toBe(0);
   expect(calculateNewPosition(4, 'right', 16)).toBe(5);
   expect(calculateNewPosition(5, 'right', 16)).toBe(6);
   expect(calculateNewPosition(6, 'right', 16)).toBe(7);
   expect(calculateNewPosition(7, 'right', 16)).toBe(4);
   expect(calculateNewPosition(8, 'right', 16)).toBe(9);
   expect(calculateNewPosition(9, 'right', 16)).toBe(10);
   expect(calculateNewPosition(10, 'right', 16)).toBe(11);
   expect(calculateNewPosition(11, 'right', 16)).toBe(8);
   expect(calculateNewPosition(12, 'right', 16)).toBe(13);
   expect(calculateNewPosition(13, 'right', 16)).toBe(14);
   expect(calculateNewPosition(14, 'right', 16)).toBe(15);
   expect(calculateNewPosition(15, 'right', 16)).toBe(12);
});

test('Tests labrynth `left` on 4x4', () => {
   expect(calculateNewPosition(0, 'left', 16)).toBe(3);
   expect(calculateNewPosition(1, 'left', 16)).toBe(0);
   expect(calculateNewPosition(2, 'left', 16)).toBe(1);
   expect(calculateNewPosition(3, 'left', 16)).toBe(2);
   expect(calculateNewPosition(4, 'left', 16)).toBe(7);
   expect(calculateNewPosition(5, 'left', 16)).toBe(4);
   expect(calculateNewPosition(6, 'left', 16)).toBe(5);
   expect(calculateNewPosition(7, 'left', 16)).toBe(6);
   expect(calculateNewPosition(8, 'left', 16)).toBe(11);
   expect(calculateNewPosition(9, 'left', 16)).toBe(8);
   expect(calculateNewPosition(10, 'left', 16)).toBe(9);
   expect(calculateNewPosition(11, 'left', 16)).toBe(10);
   expect(calculateNewPosition(12, 'left', 16)).toBe(15);
   expect(calculateNewPosition(13, 'left', 16)).toBe(12);
   expect(calculateNewPosition(14, 'left', 16)).toBe(13);
   expect(calculateNewPosition(15, 'left', 16)).toBe(14);
});

test('Tests labrynth `up` on 7x7', () => {
   expect(calculateNewPosition(0, 'up', 49)).toBe(42);
   expect(calculateNewPosition(1, 'up', 49)).toBe(43);
   expect(calculateNewPosition(2, 'up', 49)).toBe(44);
   expect(calculateNewPosition(3, 'up', 49)).toBe(45);
   expect(calculateNewPosition(4, 'up', 49)).toBe(46);
   expect(calculateNewPosition(5, 'up', 49)).toBe(47);
   expect(calculateNewPosition(6, 'up', 49)).toBe(48);
   expect(calculateNewPosition(7, 'up', 49)).toBe(0);
   expect(calculateNewPosition(8, 'up', 49)).toBe(1);
   expect(calculateNewPosition(9, 'up', 49)).toBe(2);
   expect(calculateNewPosition(10, 'up', 49)).toBe(3);
   expect(calculateNewPosition(11, 'up', 49)).toBe(4);
   expect(calculateNewPosition(12, 'up', 49)).toBe(5);
   expect(calculateNewPosition(13, 'up', 49)).toBe(6);
   expect(calculateNewPosition(14, 'up', 49)).toBe(7);
   expect(calculateNewPosition(15, 'up', 49)).toBe(8);
   expect(calculateNewPosition(16, 'up', 49)).toBe(9);
   expect(calculateNewPosition(17, 'up', 49)).toBe(10);
   expect(calculateNewPosition(18, 'up', 49)).toBe(11);
   expect(calculateNewPosition(19, 'up', 49)).toBe(12);
   expect(calculateNewPosition(20, 'up', 49)).toBe(13);
   expect(calculateNewPosition(21, 'up', 49)).toBe(14);
   expect(calculateNewPosition(22, 'up', 49)).toBe(15);
   expect(calculateNewPosition(23, 'up', 49)).toBe(16);
   expect(calculateNewPosition(24, 'up', 49)).toBe(17);
   expect(calculateNewPosition(25, 'up', 49)).toBe(18);
   expect(calculateNewPosition(26, 'up', 49)).toBe(19);
   expect(calculateNewPosition(27, 'up', 49)).toBe(20);
   expect(calculateNewPosition(28, 'up', 49)).toBe(21);
   expect(calculateNewPosition(29, 'up', 49)).toBe(22);
   expect(calculateNewPosition(30, 'up', 49)).toBe(23);
   expect(calculateNewPosition(31, 'up', 49)).toBe(24);
   expect(calculateNewPosition(32, 'up', 49)).toBe(25);
   expect(calculateNewPosition(33, 'up', 49)).toBe(26);
   expect(calculateNewPosition(34, 'up', 49)).toBe(27);
   expect(calculateNewPosition(35, 'up', 49)).toBe(28);
   expect(calculateNewPosition(36, 'up', 49)).toBe(29);
   expect(calculateNewPosition(37, 'up', 49)).toBe(30);
   expect(calculateNewPosition(38, 'up', 49)).toBe(31);
   expect(calculateNewPosition(39, 'up', 49)).toBe(32);
   expect(calculateNewPosition(40, 'up', 49)).toBe(33);
   expect(calculateNewPosition(41, 'up', 49)).toBe(34);
   expect(calculateNewPosition(42, 'up', 49)).toBe(35);
   expect(calculateNewPosition(43, 'up', 49)).toBe(36);
   expect(calculateNewPosition(44, 'up', 49)).toBe(37);
   expect(calculateNewPosition(45, 'up', 49)).toBe(38);
   expect(calculateNewPosition(46, 'up', 49)).toBe(39);
   expect(calculateNewPosition(47, 'up', 49)).toBe(40);
   expect(calculateNewPosition(48, 'up', 49)).toBe(41);
});

test('Tests labrynth `down` on 7x7', () => {
   expect(calculateNewPosition(0, 'down', 49)).toBe(7);
   expect(calculateNewPosition(1, 'down', 49)).toBe(8);
   expect(calculateNewPosition(2, 'down', 49)).toBe(9);
   expect(calculateNewPosition(3, 'down', 49)).toBe(10);
   expect(calculateNewPosition(4, 'down', 49)).toBe(11);
   expect(calculateNewPosition(5, 'down', 49)).toBe(12);
   expect(calculateNewPosition(6, 'down', 49)).toBe(13);
   expect(calculateNewPosition(7, 'down', 49)).toBe(14);
   expect(calculateNewPosition(8, 'down', 49)).toBe(15);
   expect(calculateNewPosition(9, 'down', 49)).toBe(16);
   expect(calculateNewPosition(10, 'down', 49)).toBe(17);
   expect(calculateNewPosition(11, 'down', 49)).toBe(18);
   expect(calculateNewPosition(12, 'down', 49)).toBe(19);
   expect(calculateNewPosition(13, 'down', 49)).toBe(20);
   expect(calculateNewPosition(14, 'down', 49)).toBe(21);
   expect(calculateNewPosition(15, 'down', 49)).toBe(22);
   expect(calculateNewPosition(16, 'down', 49)).toBe(23);
   expect(calculateNewPosition(17, 'down', 49)).toBe(24);
   expect(calculateNewPosition(18, 'down', 49)).toBe(25);
   expect(calculateNewPosition(19, 'down', 49)).toBe(26);
   expect(calculateNewPosition(20, 'down', 49)).toBe(27);
   expect(calculateNewPosition(21, 'down', 49)).toBe(28);
   expect(calculateNewPosition(22, 'down', 49)).toBe(29);
   expect(calculateNewPosition(23, 'down', 49)).toBe(30);
   expect(calculateNewPosition(24, 'down', 49)).toBe(31);
   expect(calculateNewPosition(25, 'down', 49)).toBe(32);
   expect(calculateNewPosition(26, 'down', 49)).toBe(33);
   expect(calculateNewPosition(27, 'down', 49)).toBe(34);
   expect(calculateNewPosition(28, 'down', 49)).toBe(35);
   expect(calculateNewPosition(29, 'down', 49)).toBe(36);
   expect(calculateNewPosition(30, 'down', 49)).toBe(37);
   expect(calculateNewPosition(31, 'down', 49)).toBe(38);
   expect(calculateNewPosition(32, 'down', 49)).toBe(39);
   expect(calculateNewPosition(33, 'down', 49)).toBe(40);
   expect(calculateNewPosition(34, 'down', 49)).toBe(41);
   expect(calculateNewPosition(35, 'down', 49)).toBe(42);
   expect(calculateNewPosition(36, 'down', 49)).toBe(43);
   expect(calculateNewPosition(37, 'down', 49)).toBe(44);
   expect(calculateNewPosition(38, 'down', 49)).toBe(45);
   expect(calculateNewPosition(39, 'down', 49)).toBe(46);
   expect(calculateNewPosition(40, 'down', 49)).toBe(47);
   expect(calculateNewPosition(41, 'down', 49)).toBe(48);
   expect(calculateNewPosition(42, 'down', 49)).toBe(0);
   expect(calculateNewPosition(43, 'down', 49)).toBe(1);
   expect(calculateNewPosition(44, 'down', 49)).toBe(2);
   expect(calculateNewPosition(45, 'down', 49)).toBe(3);
   expect(calculateNewPosition(46, 'down', 49)).toBe(4);
   expect(calculateNewPosition(47, 'down', 49)).toBe(5);
   expect(calculateNewPosition(48, 'down', 49)).toBe(6);
});

test('Tests labrynth `left` on 7x7', () => {  
   expect(calculateNewPosition(0, 'left', 49)).toBe(6);
   expect(calculateNewPosition(1, 'left', 49)).toBe(0);
   expect(calculateNewPosition(2, 'left', 49)).toBe(1);
   expect(calculateNewPosition(3, 'left', 49)).toBe(2);
   expect(calculateNewPosition(4, 'left', 49)).toBe(3);
   expect(calculateNewPosition(5, 'left', 49)).toBe(4);
   expect(calculateNewPosition(6, 'left', 49)).toBe(5);
   expect(calculateNewPosition(7, 'left', 49)).toBe(13);
   expect(calculateNewPosition(8, 'left', 49)).toBe(7);
   expect(calculateNewPosition(9, 'left', 49)).toBe(8);
   expect(calculateNewPosition(10, 'left', 49)).toBe(9);
   expect(calculateNewPosition(11, 'left', 49)).toBe(10);
   expect(calculateNewPosition(12, 'left', 49)).toBe(11);
   expect(calculateNewPosition(13, 'left', 49)).toBe(12);
   expect(calculateNewPosition(14, 'left', 49)).toBe(20);
   expect(calculateNewPosition(15, 'left', 49)).toBe(14);
   expect(calculateNewPosition(16, 'left', 49)).toBe(15);
   expect(calculateNewPosition(17, 'left', 49)).toBe(16);
   expect(calculateNewPosition(18, 'left', 49)).toBe(17);
   expect(calculateNewPosition(19, 'left', 49)).toBe(18);
   expect(calculateNewPosition(20, 'left', 49)).toBe(19);
   expect(calculateNewPosition(21, 'left', 49)).toBe(27);
   expect(calculateNewPosition(22, 'left', 49)).toBe(21);
   expect(calculateNewPosition(23, 'left', 49)).toBe(22);
   expect(calculateNewPosition(24, 'left', 49)).toBe(23);
   expect(calculateNewPosition(25, 'left', 49)).toBe(24);
   expect(calculateNewPosition(26, 'left', 49)).toBe(25);
   expect(calculateNewPosition(27, 'left', 49)).toBe(26);
   expect(calculateNewPosition(28, 'left', 49)).toBe(34);
   expect(calculateNewPosition(29, 'left', 49)).toBe(28);
   expect(calculateNewPosition(30, 'left', 49)).toBe(29);
   expect(calculateNewPosition(31, 'left', 49)).toBe(30);
   expect(calculateNewPosition(32, 'left', 49)).toBe(31);
   expect(calculateNewPosition(33, 'left', 49)).toBe(32);
   expect(calculateNewPosition(34, 'left', 49)).toBe(33);
   expect(calculateNewPosition(35, 'left', 49)).toBe(41);
   expect(calculateNewPosition(36, 'left', 49)).toBe(35);
   expect(calculateNewPosition(37, 'left', 49)).toBe(36);
   expect(calculateNewPosition(38, 'left', 49)).toBe(37);
   expect(calculateNewPosition(39, 'left', 49)).toBe(38);
   expect(calculateNewPosition(40, 'left', 49)).toBe(39);
   expect(calculateNewPosition(41, 'left', 49)).toBe(40);
   expect(calculateNewPosition(42, 'left', 49)).toBe(48);
   expect(calculateNewPosition(43, 'left', 49)).toBe(42);
   expect(calculateNewPosition(44, 'left', 49)).toBe(43);
   expect(calculateNewPosition(45, 'left', 49)).toBe(44);
   expect(calculateNewPosition(46, 'left', 49)).toBe(45);
   expect(calculateNewPosition(47, 'left', 49)).toBe(46);
   expect(calculateNewPosition(48, 'left', 49)).toBe(47);
});

test('Tests labrynth `right` on 7x7', () => {  
   expect(calculateNewPosition(0, 'right', 49)).toBe(1);
   expect(calculateNewPosition(1, 'right', 49)).toBe(2);
   expect(calculateNewPosition(2, 'right', 49)).toBe(3);
   expect(calculateNewPosition(3, 'right', 49)).toBe(4);
   expect(calculateNewPosition(4, 'right', 49)).toBe(5);
   expect(calculateNewPosition(5, 'right', 49)).toBe(6);
   expect(calculateNewPosition(6, 'right', 49)).toBe(0);
   expect(calculateNewPosition(7, 'right', 49)).toBe(8);
   expect(calculateNewPosition(8, 'right', 49)).toBe(9);
   expect(calculateNewPosition(9, 'right', 49)).toBe(10);
   expect(calculateNewPosition(10, 'right', 49)).toBe(11);
   expect(calculateNewPosition(11, 'right', 49)).toBe(12);
   expect(calculateNewPosition(12, 'right', 49)).toBe(13);
   expect(calculateNewPosition(13, 'right', 49)).toBe(7);
   expect(calculateNewPosition(14, 'right', 49)).toBe(15);
   expect(calculateNewPosition(15, 'right', 49)).toBe(16);
   expect(calculateNewPosition(16, 'right', 49)).toBe(17);
   expect(calculateNewPosition(17, 'right', 49)).toBe(18);
   expect(calculateNewPosition(18, 'right', 49)).toBe(19);
   expect(calculateNewPosition(19, 'right', 49)).toBe(20);
   expect(calculateNewPosition(20, 'right', 49)).toBe(14);
   expect(calculateNewPosition(21, 'right', 49)).toBe(22);
   expect(calculateNewPosition(22, 'right', 49)).toBe(23);
   expect(calculateNewPosition(23, 'right', 49)).toBe(24);
   expect(calculateNewPosition(24, 'right', 49)).toBe(25);
   expect(calculateNewPosition(25, 'right', 49)).toBe(26);
   expect(calculateNewPosition(26, 'right', 49)).toBe(27);
   expect(calculateNewPosition(27, 'right', 49)).toBe(21);
   expect(calculateNewPosition(28, 'right', 49)).toBe(29);
   expect(calculateNewPosition(29, 'right', 49)).toBe(30);
   expect(calculateNewPosition(30, 'right', 49)).toBe(31);
   expect(calculateNewPosition(31, 'right', 49)).toBe(32);
   expect(calculateNewPosition(32, 'right', 49)).toBe(33);
   expect(calculateNewPosition(33, 'right', 49)).toBe(34);
   expect(calculateNewPosition(34, 'right', 49)).toBe(28);
   expect(calculateNewPosition(35, 'right', 49)).toBe(36);
   expect(calculateNewPosition(36, 'right', 49)).toBe(37);
   expect(calculateNewPosition(37, 'right', 49)).toBe(38);
   expect(calculateNewPosition(38, 'right', 49)).toBe(39);
   expect(calculateNewPosition(39, 'right', 49)).toBe(40);
   expect(calculateNewPosition(40, 'right', 49)).toBe(41);
   expect(calculateNewPosition(41, 'right', 49)).toBe(35);
   expect(calculateNewPosition(42, 'right', 49)).toBe(43);
   expect(calculateNewPosition(43, 'right', 49)).toBe(44);
   expect(calculateNewPosition(44, 'right', 49)).toBe(45);
   expect(calculateNewPosition(45, 'right', 49)).toBe(46);
   expect(calculateNewPosition(46, 'right', 49)).toBe(47);
   expect(calculateNewPosition(47, 'right', 49)).toBe(48);
   expect(calculateNewPosition(48, 'right', 49)).toBe(42);
});

